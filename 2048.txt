package com.javarush.task.jdk13.task53.task5301;

import com.javarush.engine.cell.*;
import java.util.Arrays;

public class Game2048 extends Game {

    private static final int SIDE = 10;
    private int[][] gameField = new int[SIDE][SIDE];
    private boolean isGameStopped = false;
    private int score = 0;

    @Override
    public void initialize() {
        setScreenSize(SIDE, SIDE);
        createGame();
        drawScene();
    }
    private void createGame(){
        gameField = new int[SIDE][SIDE];
        createNewNumber();
        createNewNumber();
    }

    private void createNewNumber(){
        if(getMaxTileValue() >= 2048){
            win();
            return;
        }

        int x, y;
        do{
            x = getRandomNumber(SIDE);
            y = getRandomNumber(SIDE);
        }
        while(gameField[y][x] != 0);

        if(getRandomNumber(10) == 9){
            gameField[y][x] = 4;
        }else{
            gameField[y][x] = 2;
        }
    }

    private void drawScene(){
        for (int y = 0; y < gameField.length; y++) {
            for (int x = 0; x < gameField[y].length; x++) {
                setCellColoredNumber(x, y, gameField[y][x]);
            }
        }
    }

    private Color getColorByValue(int value){
        switch (value){
            case 0:
                return Color.WHITE;
            case 2:
                return Color.BLUE;
            case 4:
                return Color.YELLOW;
            case 8:
                return Color.AQUAMARINE;
            case 16:
                return Color.BURLYWOOD;
            case 32:
                return Color.LIGHTPINK;
            case 64:
                return Color.CORAL;
            case 128:
                return Color.DARKMAGENTA;
            case 256:
                return Color.VIOLET;
            case 512:
                return Color.HOTPINK;
            case 1024:
                return Color.DEEPSKYBLUE;
            case 2048:
                return Color.DEEPPINK;
            default:
                return Color.GREEN;
        }
    }

    private void setCellColoredNumber(int x, int y, int value){
        Color color = getColorByValue(value);
        String string = value > 0? "" + value : "";
        setCellValueEx(x, y, color, string);
    }

    private boolean compressRow(int[]row){
        int[] original = Arrays.copyOf(row, row.length);
        int nonZeroIndex = 0;
        for (int currentIndex = 0; currentIndex < row.length; currentIndex++) {
            if (row[currentIndex] != 0) {
                row[nonZeroIndex++] = row[currentIndex];
            }
        }
        while (nonZeroIndex < row.length) {
            row[nonZeroIndex++] = 0;
        }
        return !Arrays.equals(original, row);
    }

    private boolean mergeRow(int[] row){
        boolean result = false;
        for (int i = 0; i < row.length-1; i++) {
            if(row[i] != 0 && row[i] == row[i + 1]){
                row[i] += row[i + 1];
                row[i + 1] = 0;
                result = true;
                score = score + row[i];
                setScore(score);
            }
        }
        return result;
    }

    @Override
    public void onKeyPress(Key key){
        if (!isGameStopped) {
            if (key == Key.LEFT) {
                moveLeft();
            } else if (key == Key.RIGHT) {
                moveRight();
            } else if (key == Key.UP) {
                moveUp();
            } else if (key == Key.DOWN) {
                moveDown();
            }
            drawScene();
            if (!canUserMove()) {
                gameOver();
            }
        } else if (key == Key.SPACE) {
            isGameStopped = false;
            score = 0;
            setScore(score);
            createGame();
            drawScene();
        }
    }




    private void moveLeft(){
        boolean anyChange = false;
        for (int y = 0; y < SIDE; y++) {
            boolean compressed = compressRow(gameField[y]);
            boolean merged = mergeRow(gameField[y]);
            compressRow(gameField[y]);
            if (compressed || merged) {
                anyChange = true;
            }
        }
        if (anyChange) {
            createNewNumber();
        }
    }

    private void moveRight(){
        rotateClockwise();
        rotateClockwise();
        moveLeft();
        rotateClockwise();
        rotateClockwise();
    }

    private void moveUp(){
       rotateClockwise();
       rotateClockwise();
       rotateClockwise();
       moveLeft();
       rotateClockwise();
    }
    
    private void moveDown(){
        rotateClockwise();
        moveLeft();
        rotateClockwise();
        rotateClockwise();
        rotateClockwise();
    }
    private void rotateClockwise(){
        int[][] result = new int[SIDE][SIDE];

        for (int i = 0; i < SIDE; i++) {
            for (int j = 0; j < SIDE; j++) {
                result[j][SIDE - 1 - i] = gameField[i][j];
            }
        }
        gameField = result;
    }

    private int getMaxTileValue(){
        int max = gameField[0][0];
        for (int i = 0; i < gameField.length; i++) {
            for (int j = 0; j < gameField[i].length; j++) {
                if(gameField[i][j] >= max){
                    max = gameField[i][j];
                }
            }
        }
        return max;
    }

    private boolean canUserMove() {
        if (getEmptyCellsCount() > 0) {
            return true;
        }
        for (int y = 0; y < SIDE; y++) {
            for (int x = 0; x < SIDE - 1; x++) {
                if ((gameField[y][x] == gameField[y][x + 1]) ||
                        (gameField[x][y] == gameField[x + 1][y])) {
                    return true;
                }
            }
        }
        return false;
    }

    private int getEmptyCellsCount() {
        int count = 0;
        for (int y = 0; y < SIDE; y++) {
            for (int x = 0; x < SIDE; x++) {
                if (gameField[y][x] == 0) {
                    count++;
                }
            }
        }
        return count;
    }

    private void win(){
        showMessageDialog(Color.RED, "You WIN!!!", Color.WHITE, 50);
        isGameStopped = true;
    }

    private void gameOver(){
        showMessageDialog(Color.RED, "You LOOSE!\n Game Over!", Color.WHITE, 50);
        isGameStopped = true;
    }
}